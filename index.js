// create elements and add them in DOM
function createElem(elem, elemClass, elemText = "") {
  const element = document.createElement(elem);
  element.className = elemClass;
  element.innerText = elemText;
  return element;
}

const wrapper = createElem("div", "wrapper");
const h1 = createElem("h1", "title", "RSS –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞");
const textarea = createElem("textarea", "textarea");
const keyboard = createElem("div", "keyboard");
const text1 = createElem("p", "text", "OS: Windows");
const text2 = createElem("p", "text", "Press Alt+Shift to change language");

document.body.append(wrapper);
wrapper.append(h1, textarea, keyboard, text1, text2);

function buttonMaker (key, place, ownClass) {
  const button = createElem("div", "key", key);
  button.classList.add(ownClass);
  place.append(button);
}

const rowList = [ 
  ["`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "BackSpace"],
  ["Tab", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "[", "]", "\\", "Del"],
  ["Capslock", "a", "s", "d", "f", "g", "h", "j", "k", "l", ";", "'", "Enter"],
  ["Shift", "z", "x", "c", "v", "b", "n", "m", ",", ".", "/", "‚ñ≤", "Shift"],
  ["Ctrl", "ENG ", "Alt", " ", "Alt", "‚óÑ", "‚ñº", "‚ñ∫", "Ctrl"],
];

const ownClasses = [
  ["Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace"],
  ["Tab", "KeyQ",  "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP",  "BracketLeft", "BracketRight", "Backslash", "Delete"],
  ["CapsLock",  "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter"],
  ["ShiftLeft",  "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ArrowUp", "ShiftRight"],
  ["ControlLeft", "lang", "AltLeft", "Space", "AltRight", "ArrowLeft", "ArrowDown", "ArrowRight", "ControlRight"],
];

for (let i = 0; i < 5; i++) {
  let row = createElem("div", "row");
  keyboard.append(row);
  for(let j= 0; j < rowList[i].length; j++) {
    buttonMaker(rowList[i][j], row, ownClasses[i][j]);
  }
}

// –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
document.addEventListener("keydown", (event) => {
   const elem =  document.querySelector(`.${event.code}`);
      if(elem === null) {
       return;
   } else {
       elem.classList.add("active");
       }});

document.addEventListener("keyup", (event) => {
    let elem =  document.querySelector(`.${event.code}`);
    if(elem === null) {
     return ;
 } else {
    elem.classList.remove("active");
   }});


// –í—ã–Ω–æ—Å–∏–º –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∞–≤–∏—à–∞–º–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

function inputText(elem) {

    if(!textarea.onfocus) {
        textarea.focus();
    }
    let pos = textarea.selectionStart;
    let posEnd = textarea.selectionEnd;
    
    if(elem === null) {
        return ;
    } else {
        //   –ø–µ—á–∞—Ç–∞–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã
        if(elem.classList.contains("letter") || elem.classList.contains("digit")|| elem.classList.contains("Equal") || elem.classList.contains("Minus")|| elem.classList.contains("Backquote") || elem.classList.contains("BracketRight") || elem.classList.contains("BracketLeft") ||elem.classList.contains("Backslash") || elem.classList.contains("Semicolon") || elem.classList.contains("Comma")|| elem.classList.contains("Period")||elem.classList.contains("Slash") || elem.classList.contains("Quote") ) {
           
            if(pos == 0) {
            textarea.textContent += elem.innerText;
            } else {
            textarea.textContent = textarea.textContent.slice(0, pos) + elem.innerText + textarea.textContent.slice(pos);
            }
            textarea.selectionStart = pos+1;
        }
        // –ø—Ä–æ–±–µ–ª
        if(elem.classList.contains("Space")){
            textarea.textContent = textarea.textContent.slice(0, pos) + " " + textarea.textContent.slice(pos);
            textarea.selectionStart = pos+1;  
        }    
        // —É–¥–∞–ª–∏—Ç—å –Ω–∞–∑–∞–¥, –≤ —Ç. —á. –¥–∏–∞–ø–∞–∑–æ–Ω
        if(elem.classList.contains("Backspace")) {
            if(pos === posEnd) {
                textarea.textContent = textarea.textContent.slice(0, pos-1) + textarea.textContent.slice(posEnd);
                textarea.selectionStart = pos-1;
            } else {
                textarea.textContent = textarea.textContent.slice(0, pos) + textarea.textContent.slice(posEnd);
                textarea.selectionStart = pos;
            }
        }
        
        // —É–¥–∞–ª—è–µ–º –≤–ø–µ—Ä–µ–¥, –≤ —Ç.—á. –¥–∏–∞–ø–∞–∑–æ–Ω
        if(elem.classList.contains("Delete")) { 
            if(pos === posEnd) {
                textarea.textContent = textarea.textContent.slice(0, pos) + textarea.textContent.slice(posEnd + 1);
                textarea.selectionStart = posEnd;
            } else {
                textarea.textContent = textarea.textContent.slice(0, pos) + textarea.textContent.slice(posEnd);
                textarea.selectionStart = pos;
            }
        }
        // –¥–µ–ª–∞–µ–º –¢–∞–±
        if(elem.classList.contains("Tab")) {
           textarea.textContent = textarea.textContent.slice(0, pos) + "        " + textarea.textContent.slice(pos);
           textarea.selectionStart = pos + 8;
        }

        // –¥–µ–ª–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏
        if(elem.classList.contains("ArrowRight")) {
            textarea.selectionEnd++;
            textarea.selectionStart = pos + 1;
            } 
                
        if(elem.classList.contains("ArrowLeft")) {
            textarea.selectionStart--;
            textarea.selectionEnd = posEnd-1;
        }
        if(elem.classList.contains("ArrowDown")) {
            textarea.textContent = textarea.textContent.slice(0, pos) + "–Ω–µ —Ö–æ—á—É –≤–Ω–∏–∑ü†ó" + textarea.textContent.slice(pos);
            textarea.selectionStart = pos + 14;
        }
        if(elem.classList.contains("ArrowUp")) {
            textarea.textContent = textarea.textContent.slice(0, pos) + "–Ω–µ —Ö–æ—á—É –≤–≤–µ—Ä—Öü†ï" + textarea.textContent.slice(pos);
            textarea.selectionStart = pos + 15;
        }

        // –¥–µ–ª–∞–µ–º Enter
        if(elem.classList.contains("Enter")) {
            textarea.textContent = textarea.textContent.slice(0, pos) + "\n" + textarea.textContent.slice(pos);
            textarea.selectionStart= pos+1;
          }
    }}

// –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ Shift + Arrows
document.addEventListener("keydown", (event) => {

    
    if(event.shiftKey && event.key == "ArrowRight") {
        console.log(textarea.selectionStart, textarea.selectionEnd);
        textarea.selectionStart = textarea.selectionStart-1;
    }
    if(event.shiftKey && event.key == "ArrowLeft") {
        console.log(textarea.selectionStart, textarea.selectionEnd);
        // textarea.selectionStart--;
        textarea.selectionEnd = textarea.selectionEnd+1;

    }
});

// –ø–µ—á–∞—Ç–∞–µ–º –≤ —Ç–µ–∫—Å—Ç–∞—Ä–µ–∞ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã = –≥–ª—é—á–∏—Ç –ø–µ—á–∞—Ç—å —Å –≤–∏—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!!! - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
keyboard.addEventListener("click", (event) => inputText(event.target));

// –ø–µ—á–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener("keydown", (event) => inputText(document.querySelector(`.${event.code}`)));
document.addEventListener("keydown", (event) => event.preventDefault());


//  –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç–∞—Ä–µ–∞ –Ω–µ —Ç–µ—Ä—è–ª–∞ —Ñ–æ–∫—É—Å –ø—Ä–∏ –∫–ª–∏–∫–∞–º –ø–æ –≤–∏—Ä—Ç—É–ª–∞—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
 keyboard.onmousedown = (e) => {
    if(document.activeElement === textarea) {
        e.preventDefault();
    }
 };

//   –¥–µ–ª–∞–µ–º –∫–∞–ø—Å
const buttons = document.querySelectorAll(".key");

for(let but of buttons) {
    if (but.className.includes("Key")) {
        but.classList.add("letter");
    } else if (but.className.includes("Digit")) {
        but.classList.add("digit");
    }
 }

const letters = document.querySelectorAll(".letter");
const symbols= [buttons[0], buttons[25], buttons[26], buttons [39], buttons[40], buttons[50], buttons[51]];

const caps = document.querySelector(".CapsLock");

caps.addEventListener("click", () => {

         letters.forEach(el => {
            if(el.innerText == el.innerText.toLowerCase()) {
                el.innerText = el.innerText.toUpperCase();
                 } else {
                el.innerText = el.innerText.toLowerCase();
            }
        });
        symbols.forEach(el => {
            if(el.innerText == el.innerText.toLowerCase()) {
                  el.innerText = el.innerText.toUpperCase();
             } else {
             el.innerText = el.innerText.toLowerCase();
             }});

        caps.classList.toggle("on");
    });

document.addEventListener("keydown", (event) => {
        if(event.code == "CapsLock") {

            console.log(event.key);

            letters.forEach(el => {
                if(el.innerText == el.innerText.toLowerCase()) {
                    el.innerText = el.innerText.toUpperCase();
                   } else {
                  el.innerText = el.innerText.toLowerCase();
                      }});

       symbols.forEach(el => {
           if(el.innerText == el.innerText.toLowerCase()) {
                 el.innerText = el.innerText.toUpperCase();
            } else {
            el.innerText = el.innerText.toLowerCase();
            }});
            caps.classList.toggle("on");    
     } });

    //  —Å–º–µ–Ω–∞ —è–∑—ã–∫–æ–≤
const rusLetters = ["–π", "—Ü", "—É", "–∫", "–µ", "–Ω", "–≥", "—à", "—â", "–∑", "—Ñ", "—ã", "–≤", "–∞", "–ø", "—Ä", "–æ", "–ª", "–¥", "—è", "—á", "—Å", "–º","–∏", "—Ç", "—å"];
const engLetters = ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "a", "s", "d", "f", "g", "h", "j", "k", "l", "z", "x", "c", "v", "b", "n", "m"]; 

const rusSymbols = ["—ë", "—Ö", "—ä", "–∂", "—ç","–±", "—é"];
const engSymbols = ["`", "[", "]", ";", "\"",",", "."];


const lang = document.querySelector(".lang");
lang.classList.add ("en");
document.addEventListener("keydown", (event) => {
if(event.altKey && event.shiftKey && lang.classList.contains("en")) {
       for(let i=0; i < letters.length; i++) {
            if(caps.classList.contains("on")) {
                letters[i].innerText = rusLetters[i].toUpperCase();
           } else {
            letters[i].innerText = rusLetters[i];
           }           
       }

       for(let i=0; i < symbols.length; i++) {
        if(caps.classList.contains("on")) {
            symbols[i].innerText = rusSymbols[i].toUpperCase(); 
    } else {
        symbols[i].innerText = rusSymbols[i]; 
    }}        
    
       lang.textContent = "RUS";
       lang.classList.remove("en");
       lang.classList.add("rus");
    } else if(event.altKey && event.shiftKey && lang.classList.contains("rus")) {
        for(let i=0; i < letters.length; i++) {
            if(caps.classList.contains("on")) {
                letters[i].innerText = engLetters[i].toUpperCase();
            } else {
                letters[i].innerText = engLetters[i]; 
            }                     
        }
        for(let i=0; i < symbols.length; i++) {
            symbols[i].innerText = engSymbols[i]; 
        }
        lang.textContent = "ENG";
        lang.classList.remove("ru");
        lang.classList.add("en");
        }
});